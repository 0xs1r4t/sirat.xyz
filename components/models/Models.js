import React, { Suspense, useEffect, useRef, useState } from "react";
import { Canvas } from "@react-three/fiber";
import {
   Environment,
   OrbitControls,
   Preload,
   useAnimations,
   useGLTF,
   Stats,
} from "@react-three/drei";
import {
   Bloom,
   ChromaticAberration,
   EffectComposer,
   Noise,
   SSAO,
} from "@react-three/postprocessing";

import { A11yAnnouncer } from "@react-three/a11y";
import { A11y } from "@react-three/a11y";

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Model created by: Sirat Baweja (https://github.com/0xs1r4t)
*/

// House
const House = ({ ...props }) => {
   const group = useRef();
   const { nodes, materials, animations } = useGLTF("/models/house.glb");
   const { actions } = useAnimations(animations, group);

   useEffect(() => {
      console.log(actions);
      actions.open.play();
   });

   return (
      <group ref={group} {...props} dispose={null}>
         <group name="Scene">
            <mesh
               name="houseStructure"
               geometry={nodes.houseStructure.geometry}
               material={materials["house structure"]}
               scale={[2, 1, 1]}
               userData={{ name: "houseStructure" }}
            />
            <mesh
               name="archedDoor"
               geometry={nodes.archedDoor.geometry}
               material={materials.door}
               position={[0.4, -0.27, 1.01]}
               rotation={[Math.PI / 2, 0, -Math.PI / 2]}
               scale={[0.4, 1, 0.67]}
               userData={{ name: "archedDoor" }}
            />
            <mesh
               name="roofBehind"
               geometry={nodes.roofBehind.geometry}
               material={materials["ceramic roof wide"]}
               position={[0, 0.31, 0]}
               scale={[2.17, 1, 1]}
               userData={{ name: "roofBehind" }}
            />
            <mesh
               name="roofFront"
               geometry={nodes.roofFront.geometry}
               material={materials["ceramic roof narrow"]}
               position={[0, 0.21, 0]}
               scale={[2, 1, 1]}
               userData={{ name: "roofFront" }}
            />
            <mesh
               name="chimney"
               geometry={nodes.chimney.geometry}
               material={materials["ceramic roof chimney"]}
               position={[1.51, 1.87, -0.75]}
               scale={[0.2, 0.29, 0.2]}
               userData={{ name: "chimney" }}
            />
            <mesh
               name="paneMiddle"
               geometry={nodes.paneMiddle.geometry}
               material={nodes.paneMiddle.material}
               position={[0, 1, 0.92]}
               scale={[0.03, 0.29, 0.03]}
               userData={{ name: "paneMiddle" }}
            />
            <mesh
               name="paneRTtoLB"
               geometry={nodes.paneRTtoLB.geometry}
               material={nodes.paneRTtoLB.material}
               position={[0, 1, 0.92]}
               rotation={[0, 0, -Math.PI / 3]}
               scale={[0.03, 0.4, 0.03]}
               userData={{ name: "paneRTtoLB" }}
            />
            <mesh
               name="paneLTtoRB"
               geometry={nodes.paneLTtoRB.geometry}
               material={nodes.paneLTtoRB.material}
               position={[0, 1, 0.92]}
               rotation={[0, 0, -2.09]}
               scale={[0.03, 0.4, 0.03]}
               userData={{ name: "paneLTtoRB" }}
            />
            <mesh
               name="heartWindow"
               geometry={nodes.heartWindow.geometry}
               material={nodes.heartWindow.material}
               position={[0, 1.08, 0.99]}
               rotation={[Math.PI / 2, 0, 0]}
               scale={0.31}
               userData={{ name: "heartWindow" }}
            />
            <mesh
               name="frontWindow"
               geometry={nodes.frontWindow.geometry}
               material={nodes.frontWindow.material}
               position={[0, 0, -0.61]}
               scale={[2, 1, 2.06]}
               userData={{ name: "frontWindow" }}
            />
            <mesh
               name="sideWindow"
               geometry={nodes.sideWindow.geometry}
               material={nodes.sideWindow.material}
               position={[-0.02, 0, 0]}
               rotation={[0, Math.PI / 2, 0]}
               scale={[2, 1, 2.06]}
               userData={{ name: "sideWindow" }}
            />
         </group>
      </group>
   );
};

useGLTF.preload("/models/house.glb");

// Contact
const Contact = ({ ...props }) => {
   const group = useRef();
   const { nodes, materials, animations } = useGLTF("/models/contact.glb");
   const { actions } = useAnimations(animations, group);

   useEffect(() => {
      console.log(actions);
      actions.flip.play();
   });

   return (
      <group ref={group} {...props} dispose={null}>
         <group name="Scene">
            <mesh
               name="phoneBottom"
               geometry={nodes.phoneBottom.geometry}
               material={materials["phone metal"]}
               position={[0, -0.64, 0.35]}
               rotation={[-Math.PI / 2, 0, 0]}
               scale={[1, 1, 0.16]}
               userData={{ name: "phoneBottom" }}
            />
            <mesh
               name="phoneTop"
               geometry={nodes.phoneTop.geometry}
               material={materials["phone top metal"]}
               position={[0, -0.46, -0.66]}
               rotation={[2.09, 0, 0]}
               scale={[0.97, 0.89, 0.16]}
               userData={{ name: "phoneTop" }}
            />
            <mesh
               name="phoneButton"
               geometry={nodes.phoneButton.geometry}
               material={nodes.phoneButton.material}
               position={[0, -0.48, 0.57]}
               scale={[0.36, 0.08, 0.36]}
               userData={{ name: "phoneButton" }}
            />
            <mesh
               name="phoneMiddle"
               geometry={nodes.phoneMiddle.geometry}
               material={nodes.phoneMiddle.material}
               position={[0, -0.62, -0.66]}
               rotation={[-Math.PI / 2, 0, -Math.PI / 2]}
               scale={[0.25, 0.74, 0.25]}
               userData={{ name: "phoneMiddle" }}
            />
         </group>
      </group>
   );
};

useGLTF.preload("/models/contact.glb");

// Models

const Models = () => {
   return (
      <>
         <A11yAnnouncer />
         <Canvas concurrent>
            <ambientLight />
            <directionalLight position={[20, 10, 20]} color="white" />
            <Suspense fallback={null}>
               <Environment background={false} files="textures/holographic.hdr" />
               <A11y role="button" actionCall={() => console.log("clicked")}>
                  <House position={[5, 0, -5]} />
               </A11y>
               <Contact position={[-5, 0, -5]} />

               {/* filters */}
               <EffectComposer>
                  <Bloom />
                  <SSAO />
                  <Preload all />
               </EffectComposer>
            </Suspense>
            <Stats />
         </Canvas>
      </>
   );
};

// const Models = () => {
//    return (
//       <Canvas concurrent>
//          <ambientLight />
//          <directionalLight position={[20, 10, 20]} color="white" />
//          <Suspense fallback={null}>
//             <Environment background={false} files="textures/holographic.hdr" />
//             <House position={[5, 0, 0]} />
//             <Contact position={[-5, 0, 0]} />

//             {/* filters */}
//             <EffectComposer>
//                <Bloom />
//                <SSAO />
//                <Preload all />
//             </EffectComposer>
//          </Suspense>
//          <OrbitControls regress />
//          <Stats />
//       </Canvas>
//    );
// };

export default Models;
